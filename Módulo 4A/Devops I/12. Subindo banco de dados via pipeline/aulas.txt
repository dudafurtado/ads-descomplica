Resumo:

Nesta aula, aprendemos a configurar pipelines no GitLab para automatizar a criação e gerenciamento de bancos de dados MySQL e Oracle em containers Docker. O processo começa com a criação de repositórios separados para cada banco de dados no GitLab, garantindo que cada um tenha seu próprio arquivo de configuração de pipeline (.gitlab-ci.yml). Para fins de aprendizado, o MySQL é utilizado inicialmente por ser mais leve e rápido de configurar.
Antes de configurar a pipeline, é crucial preparar o ambiente, o que inclui excluir containers e volumes existentes para garantir que a pipeline crie tudo do zero. No caso do MySQL, a imagem 'mysql:latest' pode ser mantida para evitar downloads desnecessários. Já para o Oracle, como estamos utilizando uma versão gratuita, é preciso realizar o build da imagem 'oracle/database:18.4.0-xe', o que pode levar um tempo considerável.
Um ponto importante na configuração da pipeline é o uso de "Secrets" para armazenar informações sensíveis, como senhas de banco de dados. Em vez de expor essas informações diretamente no script da pipeline, criamos variáveis protegidas no GitLab e as referenciamos no script usando a sintaxe $variável.
Para tornar a pipeline mais robusta e eficiente, utilizamos os recursos "before_script" e "after_script". O "before_script" é executado antes de cada job, permitindo realizar verificações e configurações prévias, como verificar se o container já existe e está em execução. Já o "after_script" é executado após a conclusão de cada job, sendo útil para tarefas de limpeza ou coleta de informações.
Outro recurso importante são as diretivas "only" e "except", que permitem controlar em quais branches a pipeline será executada. Por exemplo, podemos configurar a pipeline para ser executada apenas em branches que comecem com "release_", garantindo que o código seja testado e aprovado antes de ser implantado em produção.
No caso do Oracle, a configuração da pipeline inclui um stage adicional para o build da imagem, já que ela não está disponível publicamente. É importante configurar o tempo limite (timeout) da pipeline para um valor adequado, levando em consideração o tempo necessário para o build da imagem do Oracle.
Para garantir que as "Secrets" sejam utilizadas apenas em branches protegidas, é necessário configurar a proteção de branches no GitLab. Isso impede que as variáveis de ambiente contendo informações sensíveis sejam acessadas em branches não autorizadas.
Em resumo, a configuração de pipelines no GitLab para bancos de dados MySQL e Oracle envolve a criação de repositórios, configuração de secrets, uso de before_script e after_script, controle de execução com "only" e "except", build da imagem do Oracle e proteção de branches. Ao automatizar o processo de criação e gerenciamento de bancos de dados, as pipelines garantem maior agilidade, segurança e confiabilidade na entrega de software.