1. Subindo um "Ol√° mundo!" com Nginx
Exemplo simples de web site com NGINX

Subindo o Ol√° Mundo com NGINX

Subir uma aplica√ß√£o "Ol√° Mundo" com NGINX √© simples. Ap√≥s verificar se o 
Docker est√° em execu√ß√£o, utilize o comando 'docker run' com o nome desejado 
para o container, defina a porta e a imagem 'NGINX latest'. Ap√≥s a execu√ß√£o, 
acesse a aplica√ß√£o atrav√©s do navegador na porta definida.

Entendendo o comando para uso de volumes com NGINX

Para utilizar volumes no Docker com NGINX, utilize o comando 'docker run' com a 
flag '-v' seguida do caminho da pasta local e o caminho interno do container, 
separados por dois pontos. O conte√∫do da pasta local ser√° acess√≠vel dentro do 
container no caminho especificado.

Suba um NGINX puro e exponha a porta:

docker run --name web -d -p 8080:80 nginx:alpine

Teste: abra http://localhost:8080
 (deve aparecer a p√°gina padr√£o do NGINX).

Usando -v (bind mount) para servir seu arquivo

Crie sua pasta e um index.html:

mkdir -p site && cat > site/index.html <<'HTML'
<!doctype html>
<title>Ol√°</title>
<h1>Ol√°, Docker + NGINX! üéâ</h1>
HTML

Agora rode o container montando sua pasta sobre a raiz web do NGINX:

docker rm -f web 2>/dev/null || true
docker run --name web -d -p 8080:80 \
  -v "$PWD/site:/usr/share/nginx/html:ro" \
  nginx:alpine

-v host:container:ro = bind mount (seu diret√≥rio ‚Üí dentro do container, 
somente leitura).
Atualize o index.html local e recarregue o navegador: muda na hora (√≥timo 
para dev).

2. Volumes
Pra que serve os tais volumes no docker

Introdu√ß√£o aos Volumes no Docker

Volumes no Docker s√£o como gavetas externas que armazenam arquivos usados 
por containers. Sem volumes, os arquivos s√£o exclu√≠dos quando o container 
√© destru√≠do. Ao usar volumes, os arquivos persistem, permitindo acesso cont√≠nuo 
mesmo ap√≥s a reinicializa√ß√£o do container.

Funcionamento e Vantagens dos Volumes no Docker

Volumes no Docker funcionam como links entre uma pasta externa e um diret√≥rio 
interno do container. Isso permite que arquivos externos sejam acessados como se 
estivessem dentro do container, garantindo persist√™ncia de dados e facilitando a 
atualiza√ß√£o de arquivos sem precisar reconstruir a imagem.

Volumes s√£o √°reas de dados gerenciadas pelo Docker, fora da camada grav√°vel do 
container. Benef√≠cios:

Persist√™ncia: dados sobrevivem a docker rm do container.
Isolamento & portabilidade: o Docker cuida do local 
(ex.: /var/lib/docker/volumes/...).
Backup/restore facilitados e menos atrito de permiss√µes do host.

Tipos:

Named volume: voc√™ d√° um nome (ex.: -v meusdados:/caminho).
Anonymous volume: sem nome (o Docker cria um id).
Bind mount: pasta/arquivo do host mapeado para dentro do container 
(ex.: -v $PWD/site:/usr/share/nginx/html).

Cria√ß√£o/listagem:

docker volume create meusdados
docker volume ls
docker volume inspect meusdados

3. Nosso "Ol√° mundo" usando volumes
Como usar volumes em um container com o web site com NGINX

Introdu√ß√£o aos Volumes no Docker

Volumes permitem compartilhar arquivos e diret√≥rios entre o sistema host 
e os containers Docker. Isso √© √∫til para persistir dados, compartilhar 
dados entre containers e manter a imagem do container enxuta.

Usando a flag --mount para configurar volumes no Docker

A flag `--mount` oferece uma sintaxe mais detalhada para configurar volumes, 
permitindo especificar o tipo de volume (`bind`, `volume`, `tmpfs`), a origem 
(`src`) e o destino (`dst`) do volume.

Se quiser usar volume (em vez de bind) com NGINX, voc√™ precisa popular o 
volume com seu conte√∫do (porque volume nasce vazio):

# cria volume e um cont√™iner tempor√°rio para copiar o html
docker volume create sitevol

# popular o volume com um index.html
docker run --rm -v sitevol:/site alpine sh -c \
  "echo '<h1>Ol√° de um volume!</h1>' > /site/index.html"

# agora monte o volume no caminho que o NGINX serve
docker rm -f web 2>/dev/null || true
docker run --name web -d -p 8080:80 \
  -v sitevol:/usr/share/nginx/html:ro \
  nginx:alpine

4. Subindo um banco de dados
Exemplo de um container com banco de dados MySQL

Instala√ß√£o e configura√ß√£o do MySQL Workbench

Para utilizar o MySQL √© necess√°rio instalar o software MySQL Workbench, 
que permite acessar e gerenciar bancos de dados MySQL de forma mais f√°cil.

Criando um banco de dados MySQL com Docker e conectando com o Workbench

Atrav√©s do Docker, podemos criar um container com o MySQL, definindo vari√°veis 
de ambiente como senha do root e criar um novo usu√°rio com privil√©gios espec√≠ficos. 
Ap√≥s a cria√ß√£o, podemos estabelecer uma conex√£o com o container utilizando o MySQL 
Workbench.

Criando tabelas e inserindo dados no MySQL com Workbench

Dentro do esquema criado no banco de dados, podemos criar tabelas com suas 
respectivas colunas e tipos de dados. Ap√≥s a cria√ß√£o, podemos inserir dados 
utilizando comandos SQL.

Persist√™ncia de dados em containers Docker: Entendendo o problema

Ao finalizar a utiliza√ß√£o do container, √© fundamental entender que os dados 
inseridos n√£o s√£o persistidos. Ao remover o container, os dados s√£o perdidos, 
o que demonstra a import√¢ncia de mecanismos de persist√™ncia de dados em 
ambientes Docker.

Sem persist√™ncia (apenas para demonstrar):

docker run --name mysql -d -p 3306:3306 \
  -e MYSQL_ROOT_PASSWORD=senha \
  -e MYSQL_DATABASE=appdb \
  mysql:8.0

Conecte (cliente √† sua escolha), crie algo:

CREATE TABLE clientes(id INT PRIMARY KEY, nome VARCHAR(50));
INSERT INTO clientes VALUES (1,'Ana'),(2,'Bruno');

5. Os dados sumiram! Porqu√™?
O que acontece ao destruir e recriar e recriar um container com
banco de dados MySQL.

Entendendo o Funcionamento dos Volumes em Containers Docker

Ao subir um container que necessita de um volume, o Docker cria 
automaticamente um volume com um nome gerado, vinculando-o ao container, 
mesmo quando parado.

Persist√™ncia de Dados e Cria√ß√£o de Volumes em Containers Docker

Se um container com um volume associado for exclu√≠do e um novo container 
for iniciado com a mesma imagem, o Docker criar√° um novo volume para o 
novo container, resultando na perda de acesso aos dados do volume anterior.

Se voc√™ fizer:

docker rm -f mysql
docker run --name mysql -d -p 3306:3306 \
  -e MYSQL_ROOT_PASSWORD=senha \
  -e MYSQL_DATABASE=appdb \
  mysql:8.0

Vai perceber que a tabela sumiu. Motivo: sem volume, o MySQL gravou o 
datadir na camada grav√°vel do container; ao remover o container, essa camada 
√© descartada. Container novo = datadir novo.

6. Usando um volume para nosso banco de dados
Como destruir e recriar um container mantendo √† salvo nossos dados
com banco de dados MySQL.

Criando um Volume para o MySQL com Docker

Para utilizar volumes com Docker e MySQL, primeiro crie um volume com 
"docker volume create
Podemos criar um volume sem nome. Caso isso seja feito, o docker informa 
um nome aleat√≥rio, mas tamb√©m podemos criar com nome informando docker volume 
create nomevolume. Onde nomevolume voc√™ pode informar o nome do volume.‚Äã

Testando a Persist√™ncia de Dados com Volumes no MySQL

A persist√™ncia de dados com volumes no MySQL permite que os dados sejam 
mantidos mesmo ap√≥s o container ser reiniciado ou removido. Isso √© poss√≠vel 
porque os dados s√£o armazenados no volume, que √© independente do container.

Criando um Volume para o MySQL com Docker

Para utilizar volumes com Docker e MySQL, primeiro crie um volume com 
"docker volume create 

Monte um named volume em /var/lib/mysql (datadir padr√£o):

docker rm -f mysql 2>/dev/null || true
docker volume create mysqldata

docker run --name mysql -d -p 3306:3306 \
  -e MYSQL_ROOT_PASSWORD=senha \
  -e MYSQL_DATABASE=appdb \
  -v mysqldata:/var/lib/mysql \
  mysql:8.0

Agora os dados ficam no volume mysqldata e persistem mesmo que voc√™ destrua e 
recrie o container:

docker rm -f mysql
# recria apontando para o MESMO volume
docker run --name mysql -d -p 3306:3306 \
  -e MYSQL_ROOT_PASSWORD=senha \
  -e MYSQL_DATABASE=appdb \
  -v mysqldata:/var/lib/mysql \
  mysql:8.0
# dados continuam l√°

Backup r√°pido do volume
docker run --rm -v mysqldata:/var/lib/mysql -v "$PWD:/backup" \
  alpine sh -c "tar czf /backup/mysql_backup.tgz -C /var/lib mysql"

Perguntas:
‚ÄãCom um volume montado em um container, o que acontece se alterarmos 
um arquivo do volume referenciado de fora do container, ou seja, direto 
no ‚Äúhost‚Äù?

As mudan√ßas aparecem dentro do container imediatamente (ou quase), porque 
volume √© um ‚Äúmount‚Äù para o mesmo diret√≥rio/arquivos. Isso vale tanto para:
Bind mount (-v $PWD/site:/usr/share/nginx/html): voc√™ edita no host e o 
container v√™ na hora.
Volume nomeado (-v meusdados:/data): o conte√∫do mora no host 
(ex.: Linux em /var/lib/docker/volumes/meusdados/_data) e qualquer altera√ß√£o 
ali tamb√©m aparece no container.

Detalhes e cuidados

Cache da aplica√ß√£o: se o processo dentro do container mant√©m o arquivo aberto 
ou faz cache, pode n√£o refletir at√© reabrir/recarregar. Ferramentas de watch 
(inotify) normalmente recebem eventos.
Permiss√µes/UID/GID: o usu√°rio dentro do container precisa ter permiss√£o para 
ler/escrever. Se voc√™ editar no host como outro usu√°rio, o container pode 
perder acesso. Ajuste com chown/chmod ou rode o processo com UID compat√≠vel.
Montagem read-only (:ro): o container n√£o escreve, mas l√™; altera√ß√µes feitas 
no host continuam vis√≠veis no container.
Docker Desktop (macOS/Windows): h√° uma camada de virtualiza√ß√£o; as mudan√ßas 
chegam, por√©m watchers podem ter ligeiro atraso (ainda assim funcionam).
Volumes nomeados: tecnicamente voc√™ pode editar direto no Mountpoint do volume, 
mas n√£o √© recomendado (risco de permiss√µes/SELinux). Prefira usar um container 
auxiliar para manipular dados:

docker run --rm -it -v meusdados:/data alpine sh
# dentro dele, edite /data/...

Mini-demonstra√ß√£o (bind mount)
mkdir -p site && echo "v1" > site/index.html
docker run --name web -d -p 8080:80 -v "$PWD/site:/usr/share/nginx/html:ro" 
nginx:alpine
# edite no host:
echo "v2" > site/index.html
# dentro do container j√° est√° "v2":
docker exec web sh -c 'cat /usr/share/nginx/html/index.html'

Portanto: volume = vis√£o compartilhada do mesmo filesystem; mudar no host muda 
para o container, e vice-versa, respeitando permiss√µes e poss√≠veis caches da 
aplica√ß√£o.

Resumo:
No contexto da utiliza√ß√£o de containers Docker, a persist√™ncia de dados √© um 
aspecto crucial, especialmente quando se lida com aplica√ß√µes que exigem a 
manuten√ß√£o de informa√ß√µes mesmo ap√≥s a interrup√ß√£o ou remo√ß√£o de um container. 
Volumes Docker surgem como uma solu√ß√£o eficaz para esse desafio, proporcionando 
um mecanismo para armazenar dados de forma independente do ciclo de vida do container.

Imagine a situa√ß√£o em que voc√™ est√° executando um servidor web Nginx em um 
container Docker. Sem o uso de volumes, qualquer altera√ß√£o feita no conte√∫do 
do servidor web, como a modifica√ß√£o de arquivos HTML, seria perdida quando o 
container fosse interrompido. Isso ocorre porque, por padr√£o, o sistema de arquivos 
de um container √© ef√™mero, ou seja, existe apenas enquanto o container estiver em 
execu√ß√£o.

√â nesse ponto que os volumes se tornam valiosos. Um volume Docker atua como um 
diret√≥rio externo que pode ser montado em um container. Ao fazer isso, os dados 
dentro do volume persistem mesmo ap√≥s o container ser interrompido, reiniciado ou 
at√© mesmo exclu√≠do. Isso significa que voc√™ pode atualizar o conte√∫do do seu servidor 
web Nginx sem se preocupar com a perda de dados quando o container for reiniciado.

Existem diferentes maneiras de criar e utilizar volumes Docker. Uma delas √© a 
montagem de liga√ß√£o, ou "bind mount", que permite mapear um diret√≥rio espec√≠fico 
do sistema host para um diret√≥rio dentro do container. Por exemplo, voc√™ pode 
vincular um diret√≥rio em sua m√°quina local que cont√©m os arquivos HTML do seu 
site a um diret√≥rio dentro do container Nginx. Dessa forma, qualquer altera√ß√£o 
feita nos arquivos HTML em sua m√°quina local ser√° refletida no container.

Outra forma de usar volumes √© criando volumes nomeados. Volumes nomeados s√£o 
gerenciados pelo Docker e oferecem maior flexibilidade em termos de gerenciamento 
e compartilhamento de dados entre containers. Voc√™ pode criar um volume nomeado e, 
em seguida, mont√°-lo em um ou mais containers.

A import√¢ncia dos volumes se torna ainda mais evidente quando se trabalha com 
bancos de dados. Imagine que voc√™ est√° executando um banco de dados MySQL em 
um container Docker. Sem volumes, todos os dados armazenados no banco de dados 
seriam perdidos se o container fosse exclu√≠do. No entanto, ao usar um volume 
para armazenar os dados do MySQL, voc√™ garante que os dados persistem mesmo se 
o container for removido e recriado.

Em resumo, volumes Docker s√£o uma ferramenta essencial para qualquer pessoa que 
utilize containers Docker, especialmente para aplica√ß√µes que exigem persist√™ncia 
de dados. Eles permitem que voc√™ armazene dados de forma independente do ciclo de 
vida do container, garantindo que seus dados estejam seguros e dispon√≠veis mesmo 
ap√≥s o container ser interrompido ou exclu√≠do.