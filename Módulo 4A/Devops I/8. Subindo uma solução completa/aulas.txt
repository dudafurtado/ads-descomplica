Resumo:

Nesta aula, aprendemos a subir uma solução completa utilizando Docker, o que envolve a criação e execução de containers para banco de dados, back-end e front-end. Vimos a importância de utilizar uma rede Docker para permitir a comunicação entre os containers, garantindo que a aplicação front-end possa se comunicar com a API back-end e que esta, por sua vez, possa acessar o banco de dados. Abordamos também a criação de volumes Docker para persistir os dados do banco de dados, garantindo que as informações sejam mantidas mesmo após a reinicialização dos containers.
No caso do banco de dados Oracle, aprendemos que, diferentemente do MySQL, as imagens oficiais não estão disponíveis publicamente no Docker Hub. Para contornar isso, foi necessário clonar o repositório oficial do Oracle e construir a imagem localmente utilizando um Dockerfile específico. Esse processo exige mais tempo e recursos do que simplesmente baixar uma imagem pronta, mas é necessário para garantir que estamos utilizando uma versão adequada para o ambiente de desenvolvimento e experimentação.
Já no caso do MySQL, a imagem oficial está disponível no Docker Hub, o que facilita o processo de criação do container. Bastou executar um comando simples, especificando a imagem desejada, as portas a serem expostas, as variáveis de ambiente e o mapeamento de volume para persistir os dados.
Para o back-end, utilizamos duas aplicações: uma em Java Spring Boot e outra em Python FastAPI. Em ambos os casos, foi necessário criar um Dockerfile específico para construir a imagem da aplicação. No caso do Java, o Dockerfile realiza o download das dependências do projeto utilizando o Maven, compila o código e gera um arquivo JAR executável. Já no caso do Python, o Dockerfile instala as dependências do projeto utilizando o PIP e define o comando para iniciar a aplicação.
Por fim, para o front-end, utilizamos uma aplicação em React. Assim como nos casos anteriores, foi necessário criar um Dockerfile para construir a imagem da aplicação. O Dockerfile instala as dependências do projeto utilizando o NPM e define o comando para iniciar a aplicação.
Ao final da aula, aprendemos a subir todos os containers em uma mesma rede Docker, garantindo que a aplicação front-end pudesse se comunicar com a API back-end e que esta, por sua vez, pudesse acessar o banco de dados. Utilizamos o Postman para testar a API e o navegador para acessar a aplicação front-end.
É importante destacar que a utilização de containers Docker facilita a criação, o desenvolvimento e a implantação de aplicações, pois garante um ambiente isolado e consistente para execução do código. Além disso, a utilização de Dockerfiles permite automatizar o processo de build e implantação, tornando o processo mais eficiente e menos propenso a erros.