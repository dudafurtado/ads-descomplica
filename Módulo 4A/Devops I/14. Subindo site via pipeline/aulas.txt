Resumo:

Neste curso, aprendemos a subir um site utilizando pipelines no GitLab. O processo envolveu a criação de um repositório no GitLab, a construção do site em React, a criação de uma imagem Docker para o site e, por fim, a subida do container. Diferentemente de aplicações Java, o processo de build em React é mais simples, não exigindo compilação, apenas o empacotamento do conteúdo do site na imagem Docker. O script do pipeline para o React é bastante semelhante ao utilizado para aplicações Java, com a diferença de que não há testes unitários neste exemplo. Isso significa que não há artefatos para serem verificados e o script não inclui um job para testes.
A primeira etapa do script é a limpeza, que remove containers e imagens antigas. A segunda etapa é a construção da imagem Docker, que utiliza um Dockerfile para criar a imagem. A terceira e última etapa é o deploy, que inicia o container do site a partir da imagem criada. É importante destacar que o script do pipeline é configurável e pode ser modificado para atender às necessidades específicas de cada projeto.
No exemplo utilizado, o site React faz chamadas para uma API Java, que por sua vez se conecta a um banco de dados Oracle. Para garantir que o site funcione corretamente, é necessário que os containers da API Java e do banco de dados Oracle estejam ativos. Isso demonstra a importância de um ambiente de desenvolvimento integrado, onde diferentes componentes podem interagir entre si.
O uso de pipelines no GitLab facilita o processo de deploy e garante que o código seja testado e implantado de forma consistente. Além disso, a utilização de containers Docker torna o ambiente de desenvolvimento mais portátil e escalável. No entanto, é importante lembrar que a automação por si só não garante a qualidade do código. É fundamental que o time de desenvolvimento siga boas práticas de desenvolvimento e utilize testes automatizados para garantir a qualidade do software.
A implantação contínua, como vimos neste curso, oferece diversas vantagens, como a capacidade de lançar novas funcionalidades de forma rápida e frequente, feedback rápido sobre as alterações e a redução do risco de erros em produção. No entanto, é crucial que as organizações avaliem sua maturidade antes de adotar a implantação contínua, pois a automação de um processo falho pode levar a resultados indesejáveis.
Para mitigar os riscos, é fundamental incluir testes abrangentes no pipeline, como testes de unidade, testes de integração, testes de performance e testes de segurança. Além disso, é importante ter um bom controle de versão do código e utilizar branches para isolar as alterações em desenvolvimento do código em produção.
O uso de pipelines no GitLab, juntamente com Docker e outras ferramentas de automação, é essencial para equipes que desejam implementar a cultura DevOps e entregar software de alta qualidade de forma rápida e eficiente. No entanto, é importante lembrar que a tecnologia é apenas uma ferramenta, e o sucesso da implantação contínua depende de uma mudança cultural que valorize a colaboração, a comunicação e a automação.
Em resumo, o curso demonstrou como criar um pipeline de implantação contínua para um site React utilizando GitLab e Docker. O processo envolveu a criação de um repositório GitLab, a construção do site React, a criação de uma imagem Docker para o site e a subida do container. O script do pipeline foi explicado em detalhes, destacando a importância de cada etapa. O curso também abordou a importância de testar o site e garantir que ele esteja funcionando corretamente antes de implantá-lo em produção.
Aprender a utilizar pipelines no GitLab é uma habilidade valiosa para qualquer desenvolvedor, pois automatiza o processo de deploy e facilita a entrega contínua de software. Com as ferramentas e técnicas certas, as equipes de desenvolvimento podem entregar software de alta qualidade de forma rápida e eficiente.
Por fim, o curso nos mostrou que a implementação de um pipeline de CI/CD, como o que criamos, nos permite entregar código para produção de forma rápida, segura e automatizada. Isso significa que podemos ter um ciclo de desenvolvimento mais ágil, com entregas mais frequentes e com menor risco de erros.
As pipelines que criamos são flexíveis e podem ser modificadas para atender às necessidades de diferentes projetos. Podemos adicionar novos estágios, como testes de performance ou segurança, ou integrar com outras ferramentas, como plataformas de monitoramento.
O importante é entender os princípios básicos da integração contínua e da entrega contínua e aplicar as ferramentas e técnicas que melhor se adequam ao contexto do seu projeto e da sua equipe.
Lembre-se de que a automação é uma ferramenta poderosa, mas é preciso usá-la com sabedoria. É fundamental ter um bom controle de versão, realizar testes abrangentes e monitorar o ambiente de produção para garantir a qualidade e a estabilidade do software.

Respostas:

Alterar o pipeline para considerar diferentes ambientes como deploy para ambiente de desenvolvimento e homologação (testes) ao invés de enviar direto para a produção.
Criar de forma adequada as restrições para disparo da execução da pipeline, para que não haja o risco de envio de código incompleto ainda em desenvolvimento pelo time.
Segregar em branches distintas no Gitlab o conteúdo que irá para o ambiente de desenvolvimento do conteúdo que vai para homologação e produção e configurar isso como restrição na pipeline.
Além de testes unitários, incluir mais stages no pipeline que garantam qualidade como testes de performance e testes de vulnerabilidade de código, por exemplo.
Ao invés de destruir a imagem para recriá-la, criar versões de imagem para, em caso de problemas, se possível utilizar uma imagem anteriormente criada com a versão estável.