1. Sistemas de Numera√ß√£o
Conhecer os sistemas num√©ricos computacionais 

Bits e Bytes

Bit significa zero ou 1, aberto ou fechado, ligado ou desligado. A √∫nica coisa que o 
computador entende √© 0 e 1. Ent√£o quando mexemos o mouse ou clicamos em uma aba isso
√© interpretado para essa linguagem bit que para o computador significa algo.
O conjunto de 8 bit se chama byte, ou seja, √© um tamanho formato por uma sequencia de
0 e 1.

00000000 = 0
00000001 = 1
00000010 = 2
00000011 = 3
00000100 = 4
11111111 = 255

Grandezas de armazenamento de informa√ß√£o

Espa√ßo, Unidade de medida, N√∫mero de caracteres
8 bits, 1 byte, 1
1024 bytes, 1 kilobyte, 1.024
1024 kilobytes, 1 megabyte, 1.048.576
1024 Megabytes, 1 gigabyte, 1.073.741.824
1024 Gigabytes, 1 Terabyte, 1.099511628 x el 12

Sistemas num√©ricos
A quantidade de algarismos dispon√≠veis em um sistema numera√ß√£o designa-se de base.
Decimal = base 10, 0 1 2 3 4 5 6 7 8 9
Bin√°rio = base 2, 0 1
Octal = base 8, 0 1 2 3 4 5 6 7
Hexadecimal =  base 16, 0 1 2 3 4 5 6 7 8 9 A B C D E F 

No sistema decimal cada algarismo tem um valor posicional, ou seja, cada algorismo tem um 
peso de acordo com a sua posi√ß√£o na representa√ß√£o do valor.

O bin√°rio √© mais utilizado por m√°quinas, uma vez que os sistemas digitais trabalham internamente
com dois estados (ligado/desligado, verdadeiro/falso, aberto/fechado). O sistema bin√°rio utiliza
os s√≠mbolos: 0, 1, sendo cada s√≠mbolo designado por bit (binary digit).

Octal √© um sistema de numera√ß√£o de base 8, ou seja, recorre a 8 s√≠mbolos para a representa√ß√£o
de um determinado valor.

Muito utilizado na programa√ß√£o de microprocessadores, especialmente nos equipamentos de estudo
e sistemas de desenvolvimento. O sistema hexadecimal utiliza s√≠mbolos do sistema decimal e as letra. 
Equival√™ncias: A = 10, B = 11, C = 12, D = 13, E = 14 e F = 15. 

2. Convers√µes de base decimal
Aprender convers√£o entre os sistemas num√©ricos computacionais.

Decimal para bin√°rio
Dividir sucessivamente por 2 o n√∫mero decimal e os quocientes que v√£o sendo obtidos, at√© que o
quociente de uma das divi√µes seja 0. O resultado √© a sequ√™ncia de baixo para cima de todos os restos
obtidos.

Decimal para octal 
Divis√µes sucessivas por 8. O resultado √© a sequ√™ncia de baixo para cima de todos os restos obtidos.
217 vira 331 e 37 vira 45.

Decimal para hexadecimal
Divi√µes sucessivas por 16. 223 vira DF e 76 vira 4C.

3. Convers√µes de base bin√°ria, octal e hexadecimal
Aprender convers√£o entre os sistemas num√©ricos computacionais.

Base 2 para as demais
Bin√°rio para decimal. Basta calcular a soma de cada um dos d√≠gitos do n√∫mero bin√°rio multiplicado
por 2 (que √© a sua base) elevado √† posi√ß√£o colunar do n√∫mero que da direita para a esquerda
come√ßa em 0.
11001
1x2(4) + 1x2(3) + 0x2(2) + 0x2(2) + 1x2(1)
16 + 8 + 0 + 0 + 1 = 25

Base 8 para as demais
Bin√°rio para octal
Separe-se os d√≠gitos do n√∫mero bin√°rio em grupos de 3 bits da direita para a esquerda. Em seguida
transforma-se cada grupo individual de 3 bits em octal. Ao final, une-se os resultados:
Caso o n√∫mero de d√≠gitos do n√∫mero bin√°rio n√£o seja m√∫ltiplo de 3, completa-se os d√≠gitos √† esquerda 
com zeros (0)

Base 16 para as demais
Bin√°rio para hexadecimal
Separa-se o n√∫mero bin√°rio em grupos de 4 bits, da direita para a esquerda. Em seguida, transforma-se 
cada grupo de 4 bits em hexadecimal. Ao final, simplesmente une-se os resultados em um s√≥:
Caso o n√∫mero de d√≠gitos do n√∫mero bin√°rio n√£o seja m√∫ltiplo de 4, completa-se os d√≠gitos √† esquerda
com zeros (0) 

Octal para decimal
Obtida atrav√©s da soma dos s√≠gitos do n√∫mero octal multiplicados pela base 8 elevado √† posi√ß√£o colunar 
do d√≠gito, come√ßando em 0 da direita para a esquerda.

Octal para bin√°rio 
Decomp√µem-se o n√∫mero octal diretamente em bin√°rios de 3 d√≠gitos. Os zeros mais √† esquerda do resultado
bin√°rio podem ser omitidos.

Octal para hexadecimal
Transforma-se primeiro o octal em bin√°rio e em seguida o bin√°rio em hexadecimal.

Hexadecimal para decimal
Realizada atrav√©s da soma dos d√≠gitos hexadecimais multiplicados pela base 16 elevada √† posi√ß√£o colunar 
contando da direira para a esquerda, come√ßando em 0, de forma semelhante √† convers√£o de bin√°rios em 
decimais:
Note que os carcteres que definem os d√≠gitos hexadecimais A, B, C foram substitu√≠dos pelos valores 
equivalentes em decimais 10, 11 e 12 de acordo com a tabela da li√ß√£o anterior para a resliza√ß√£o do 
c√°lculo.

Hexadecimal para bin√°rio
Decomp√µem-se o n√∫mero hexadecimal diretamente em bin√°rios de 4 d√≠gitos. Os zeros mais √† esquerda do
resultado bin√°rio podem ser omitidos.

Hexadecimal para octal
Transforma-se primeiro o hexadecimal em bin√°rio e em seguida o bin√°rio em octal.

4. Resumos e dicas
Tabela ASCII e convers√µes

Usar conversores

Grandezas
Byte - B - 8 bit
KiloByte - KB - 1024 Byte
MegaByte - MB - 1024 KByte
GigaByte - GB - 1024 MByte 
TeraByte - TB - 1024 GByte
PetaByte - PB - 1024 TByte
ExaByte - EB - 1024 PByte
ZettaByte - ZB - 1024 EByte
YottaByte - YB - 1024 ZByte

Tabela ASCII

Os sistemas de numera√ß√£o s√£o a base da linguagem dos computadores, que, por sua vez, s√£o m√°quinas 
eletr√¥nicas que processam informa√ß√µes. Diferentemente dos humanos, que utilizam o sistema decimal 
(base 10), os computadores trabalham com o sistema bin√°rio (base 2), composto apenas pelos d√≠gitos 0 e 1, 
representando os estados ligado/desligado dos seus circuitos eletr√¥nicos. Cada d√≠gito bin√°rio √© chamado 
de bit (Binary Digit), a menor unidade de informa√ß√£o na computa√ß√£o.

O byte, por sua vez, √© um conjunto de 8 bits, o que possibilita 256 (2^8) combina√ß√µes diferentes, 
representando letras, n√∫meros, s√≠mbolos e caracteres especiais. A combina√ß√£o de bits e bytes permite 
aos computadores armazenarem e processarem grandes quantidades de dados, desde textos simples at√© 
imagens, v√≠deos e softwares complexos.

Al√©m do sistema bin√°rio, outros sistemas num√©ricos s√£o importantes na computa√ß√£o, como o octal (base 8) 
e o hexadecimal (base 16). O sistema octal, utilizando os d√≠gitos de 0 a 7, facilita a representa√ß√£o de 
n√∫meros bin√°rios grandes, agrupando-os em conjuntos de 3 bits. J√° o sistema hexadecimal, com 16 d√≠gitos 
(0 a 9 e A a F, representando de 10 a 15), √© frequentemente usado para representar endere√ßos de mem√≥ria e 
cores em programa√ß√£o, pois permite uma representa√ß√£o mais compacta de valores bin√°rios grandes.

A convers√£o entre diferentes bases num√©ricas √© fundamental para a comunica√ß√£o entre humanos e computadores. 
Para converter um n√∫mero decimal para bin√°rio, divide-se o n√∫mero decimal sucessivamente por 2, anotando 
os restos de cada divis√£o. O n√∫mero bin√°rio ser√° formado pelos restos da divis√£o, lidos do √∫ltimo para o 
primeiro. A convers√£o de decimal para octal e hexadecimal segue o mesmo princ√≠pio, dividindo-se por 8 e 16, 
respectivamente.

A tabela ASCII (American Standard Code for Information Interchange) √© outro elemento crucial na representa√ß√£o 
de caracteres em computadores. Ela estabelece um c√≥digo num√©rico para cada caractere, permitindo que os 
computadores armazenem e processem textos de forma padronizada. Cada caractere, seja letra, n√∫mero ou s√≠mbolo, 
possui um c√≥digo ASCII correspondente, possibilitando a comunica√ß√£o entre diferentes sistemas computacionais.

As grandezas de armazenamento de dados tamb√©m s√£o importantes na computa√ß√£o. O byte, como j√° vimos, √© a 
unidade b√°sica, e seus m√∫ltiplos s√£o utilizados para expressar quantidades maiores de dados. O kilobyte (KB) 
equivale a 1024 bytes, o megabyte (MB) a 1024 KB, o gigabyte (GB) a 1024 MB, e assim por diante, com as unidades 
terabyte (TB), petabyte (PB), exabyte (EB), zettabyte (ZB) e yottabyte (YB) representando quantidades cada vez 
maiores de informa√ß√£o.

Compreender os sistemas de numera√ß√£o, as convers√µes entre bases, a tabela ASCII e as grandezas de armazenamento 
√© essencial para qualquer pessoa que deseje se aprofundar no mundo da computa√ß√£o. Esses conceitos s√£o a base 
para entender como os computadores armazenam, processam e transmitem informa√ß√µes, desde as tarefas mais simples 
at√© as tecnologias mais avan√ßadas.

o computador s√≥ entende 0 e 1 (bin√°rio), porque os circuitos eletr√¥nicos trabalham com dois estados f√≠sicos: 
ligado/desligado, presen√ßa/aus√™ncia de corrente. Mas a√≠ entram as outras bases, e a import√¢ncia delas √© mais 
para n√≥s, humanos do que para a m√°quina. Vou explicar:

üîπ Bin√°rio (base 2)

√â a linguagem nativa da m√°quina. Toda informa√ß√£o (n√∫meros, letras, imagens, sons) acaba sendo codificada em 
sequ√™ncias de 0 e 1. Exemplo: n√∫mero 13 em bin√°rio √© 1101.

üîπ Decimal (base 10)

√â o sistema que n√≥s usamos naturalmente no dia a dia. Quando programamos ou interpretamos resultados, muitas 
vezes convertimos do bin√°rio para decimal. Exemplo: se o computador guarda 1101 em bin√°rio, n√≥s entendemos como 
13 em decimal.

üîπ Octal (base 8)

Foi muito usado no passado, em computadores mais antigos. Ele simplifica a representa√ß√£o de bin√°rio porque cada 
d√≠gito octal equivale a 3 d√≠gitos bin√°rios. Ex.: bin√°rio 110101 ‚Üí octal 65. Servia para reduzir a quantidade de 
d√≠gitos, facilitando a leitura de c√≥digos de m√°quina.

üîπ Hexadecimal (base 16)

√â o mais usado atualmente em programa√ß√£o e eletr√¥nica. Ele simplifica ainda mais: cada d√≠gito hexadecimal 
equivale a 4 bits (4 d√≠gitos bin√°rios). Ex.: bin√°rio 1101 1110 ‚Üí hexadecimal DE. √â muito usado para: Endere√ßos 
de mem√≥ria (0xFF00A3). C√≥digos de cores em HTML/CSS (#FF5733). Representar instru√ß√µes de m√°quina de forma compacta.